//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace Services.MVReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MonitoringControllerBinding", Namespace="urn:MonitoringControllerwsdl")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(QueueWSDL))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(DeviceWSDL))]
    public partial class MonitoringControllerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback loginOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getQueueOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MonitoringControllerService() {
            this.Url = global::Services.Properties.Settings.Default.ort_MVReference_MonitoringControllerService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event loginCompletedEventHandler loginCompleted;
        
        /// <remarks/>
        public event getDeviceCompletedEventHandler getDeviceCompleted;
        
        /// <remarks/>
        public event getQueueCompletedEventHandler getQueueCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MonitoringControllerwsdl#login", RequestNamespace="urn:MonitoringControllerwsdl", ResponseNamespace="urn:MonitoringControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string login(string name, string password) {
            object[] results = this.Invoke("login", new object[] {
                        name,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void loginAsync(string name, string password) {
            this.loginAsync(name, password, null);
        }
        
        /// <remarks/>
        public void loginAsync(string name, string password, object userState) {
            if ((this.loginOperationCompleted == null)) {
                this.loginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginOperationCompleted);
            }
            this.InvokeAsync("login", new object[] {
                        name,
                        password}, this.loginOperationCompleted, userState);
        }
        
        private void OnloginOperationCompleted(object arg) {
            if ((this.loginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginCompleted(this, new loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MonitoringControllerwsdl#getDevice", RequestNamespace="urn:MonitoringControllerwsdl", ResponseNamespace="urn:MonitoringControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public DeviceWSDL[] getDevice(string session) {
            object[] results = this.Invoke("getDevice", new object[] {
                        session});
            return ((DeviceWSDL[])(results[0]));
        }
        
        /// <remarks/>
        public void getDeviceAsync(string session) {
            this.getDeviceAsync(session, null);
        }
        
        /// <remarks/>
        public void getDeviceAsync(string session, object userState) {
            if ((this.getDeviceOperationCompleted == null)) {
                this.getDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeviceOperationCompleted);
            }
            this.InvokeAsync("getDevice", new object[] {
                        session}, this.getDeviceOperationCompleted, userState);
        }
        
        private void OngetDeviceOperationCompleted(object arg) {
            if ((this.getDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDeviceCompleted(this, new getDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MonitoringControllerwsdl#getQueue", RequestNamespace="urn:MonitoringControllerwsdl", ResponseNamespace="urn:MonitoringControllerwsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public QueueWSDL[] getQueue(string session) {
            object[] results = this.Invoke("getQueue", new object[] {
                        session});
            return ((QueueWSDL[])(results[0]));
        }
        
        /// <remarks/>
        public void getQueueAsync(string session) {
            this.getQueueAsync(session, null);
        }
        
        /// <remarks/>
        public void getQueueAsync(string session, object userState) {
            if ((this.getQueueOperationCompleted == null)) {
                this.getQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetQueueOperationCompleted);
            }
            this.InvokeAsync("getQueue", new object[] {
                        session}, this.getQueueOperationCompleted, userState);
        }
        
        private void OngetQueueOperationCompleted(object arg) {
            if ((this.getQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getQueueCompleted(this, new getQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:MonitoringControllerwsdl")]
    public partial class DeviceWSDL {
        
        private string dialStringField;
        
        private string nameField;
        
        /// <remarks/>
        public string dialString {
            get {
                return this.dialStringField;
            }
            set {
                this.dialStringField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:MonitoringControllerwsdl")]
    public partial class QueueWSDL {
        
        private string nameField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void loginCompletedEventHandler(object sender, loginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getDeviceCompletedEventHandler(object sender, getDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DeviceWSDL[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeviceWSDL[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getQueueCompletedEventHandler(object sender, getQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public QueueWSDL[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((QueueWSDL[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591